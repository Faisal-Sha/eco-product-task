services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: eco_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ecostore
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - eco_network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: eco_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - eco_network
    command: redis-server --appendonly yes --requirepass redispass123

  # Backend API (scalable - no custom container name)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ecostore?authSource=admin
      - REDIS_URL=redis://:redispass123@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
    depends_on:
      - mongodb
      - redis
    networks:
      - eco_network
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend Next.js App
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eco_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - API_URL=http://nginx:80/api
      - NEXT_PUBLIC_CDN_URL=https://res.cloudinary.com/demo
    ports:
      - "3000:3000"
    depends_on:
      - nginx
    networks:
      - eco_network

  # NGINX Reverse Proxy & Load Balancer
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: eco_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - eco_network
    volumes:
      - ./nginx/nginx-scalable.conf:/etc/nginx/nginx.conf:ro

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: eco_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - eco_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  mongo_data:
  redis_data:
  prometheus_data:

networks:
  eco_network:
    driver: bridge
