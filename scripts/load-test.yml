config:
  target: 'http://localhost:8080'
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 10
      name: "Warm-up"
    # Ramp up phase
    - duration: 120  
      arrivalRate: 10
      rampTo: 50
      name: "Ramp up load"
    # Sustained load phase
    - duration: 300
      arrivalRate: 50
      name: "Sustained load"
    # Peak load phase
    - duration: 120
      arrivalRate: 50
      rampTo: 100
      name: "Peak load"
    # Cool down phase
    - duration: 60
      arrivalRate: 100
      rampTo: 10
      name: "Cool down"
  
  # Performance thresholds
  ensure:
    p95: 200  # 95th percentile response time should be under 200ms
    p99: 500  # 99th percentile response time should be under 500ms
    maxErrorRate: 1  # Error rate should be under 1%

  # Default headers
  defaults:
    headers:
      'Content-Type': 'application/json'
      'Accept': 'application/json'

  # Payload configuration
  payload:
    path: './test-data.csv'
    fields:
      - email
      - password
      - name
    order: sequence
    skipHeader: true

  # Processor functions
  processor: './load-test-functions.js'

scenarios:
  # Main user journey scenario (70% of traffic)
  - name: "Main User Journey"
    weight: 70
    flow:
      # Health check
      - get:
          url: "/health"
          expect:
            - statusCode: 200
          capture:
            - json: "$.status"
              as: "health_status"

      # Get featured products (most common request)
      - get:
          url: "/api/products/featured"
          expect:
            - statusCode: 200
            - hasProperty: "data"
          capture:
            - json: "$.data[0].id"
              as: "featured_product_id"
      
      # Browse all products with pagination
      - get:
          url: "/api/products"
          qs:
            page: "{{ $randomInt(1, 5) }}"
            limit: "12"
            sortBy: "{{ $pick(['price', 'rating', 'createdAt']) }}"
          expect:
            - statusCode: 200
            - hasProperty: "data"
            - hasProperty: "pagination"

      # View specific product details
      - get:
          url: "/api/products/{{ featured_product_id }}"
          expect:
            - statusCode: 200
            - hasProperty: "data"

      # Search for products (30% of users)
      - get:
          url: "/api/products"
          qs:
            search: "{{ $pick(['eco', 'water', 'bottle', 'premium', 'sport']) }}"
          expect:
            - statusCode: 200
          ifTrue: "{{ $randomNumber(1, 100) <= 30 }}"

  # Authentication scenario (20% of traffic)
  - name: "Authentication Flow"
    weight: 20
    flow:
      # User registration (10% attempt)
      - post:
          url: "/api/auth/register"
          ifTrue: "{{ $randomNumber(1, 100) <= 10 }}"
          json:
            name: "{{ name }}"
            email: "{{ email }}"
            password: "{{ password }}"
            confirmPassword: "{{ password }}"
          expect:
            - statusCode: [201, 400]  # May fail if email exists
          capture:
            - json: "$.data.token"
              as: "auth_token"
            - json: "$.data.user.id"
              as: "user_id"

      # User login (more common)
      - post:
          url: "/api/auth/login"
          json:
            email: "john.doe@example.com"  # Use seeded user
            password: "User123!"
          expect:
            - statusCode: [200, 401]
          capture:
            - json: "$.data.token"
              as: "auth_token"
            - json: "$.data.user.id"  
              as: "user_id"

      # Get user profile (if authenticated)
      - get:
          url: "/api/auth/me"
          headers:
            Authorization: "Bearer {{ auth_token }}"
          expect:
            - statusCode: [200, 401]
          ifTrue: "{{ auth_token }}"

  # Admin scenario (5% of traffic)  
  - name: "Admin Operations"
    weight: 5
    flow:
      # Admin login
      - post:
          url: "/api/auth/login"
          json:
            email: "admin@ecowater.com"
            password: "Admin123!"
          expect:
            - statusCode: 200
          capture:
            - json: "$.data.token"
              as: "admin_token"

      # Get all users (admin only)
      - get:
          url: "/api/users"
          headers:
            Authorization: "Bearer {{ admin_token }}"
          qs:
            page: 1
            limit: 10
          expect:
            - statusCode: [200, 401, 403]

      # Get product stats
      - get:
          url: "/api/products/categories/stats"
          headers:
            Authorization: "Bearer {{ admin_token }}"
          expect:
            - statusCode: 200

  # API stress test scenario (5% of traffic)
  - name: "API Stress Test"
    weight: 5
    flow:
      # Rapid fire requests to test rate limiting
      - loop:
          - get:
              url: "/api/products"
          count: 15  # Should trigger rate limiting

      # Test different endpoints rapidly
      - get:
          url: "/api/products/featured"
      - get:
          url: "/api/products"
          qs:
            category: "water-bottles"
      - get:
          url: "/api/products"
          qs:
            category: "accessories"
      - get:
          url: "/metrics"  # Should be blocked for external requests

# Custom think time between requests (simulate real user behavior)
config:
  http:
    timeout: 30
  think: 1  # 1 second between requests
